/* The integration's default injected base.css file */
@tailwind base;
@tailwind components;
@tailwind utilities;

/*scroll bar*/

/* width */
::-webkit-scrollbar {
  width: 8px;
}

/* Track */
::-webkit-scrollbar-track {
  background-color: white;
  border-radius: 10px;
}
 
/* Handle */
::-webkit-scrollbar-thumb {
  background: var(--dark); 
  border-radius: 10px;
  border: 1px white solid;
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: var(--darker); 
  border: 1px white solid;
}

.overflowHidden {
  overflow: hidden;
  margin: 0;
  touch-action: none;
  -ms-touch-action: none;
  height: 100%;
}

/*color palette*/


:root{
    --main: #f8ede3;
    --primary:#dfd3c3;
    --secondary: #fcd0b4;
    --dark:#85586f;
    --darker:#5c3f4f;
}

hmlt, body{
    margin: 0;
    padding: 0;
    font-family: 'Rubik', sans-serif;
    background-color: var(--main);
    scroll-behavior: smooth;
}

.bg-wrapper{
    background-color: rgba(0,0,0, 0.3);
    backdrop-filter: blur(2px);
}

/* lock scrolling */


.overflowHidden {
  overflow: hidden;
  margin: 0;
  touch-action: none;
  -ms-touch-action: none;
  height: 100%;
}


/*fild card section*/

/* The flip card container - set the width and height to whatever you want. We have added the border property to demonstrate that the flip itself goes out of the box on hover (remove perspective if you don't want the 3D effect */
.flip-card {
    background-color: transparent;
    width: 60%;
    display: flex;
    justify-content: center;
    margin: 10% auto;
    height: 200px;
    perspective: 1000px; /* Remove this if you don't want the 3D effect */
  }
  
  /* This container is needed to position the front and back side */
  .flip-card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }
  
  /* Do an horizontal flip when you move the mouse over the flip box container */
  .flip-card:hover .flip-card-inner {
    transform: rotateY(180deg);

  }
  
  
  
  /* Position the front and back side */
  .flip-card-front, .flip-card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden; /* Safari */
    backface-visibility: hidden;
  }
  
   
  /* Style the back side */
  .flip-card-back {
    background-color: var(--dark);
    color: white;
    transform: rotateY(180deg);
  }


  /*back to top btn*/


.top-to-btm{
  position: relative;
}
.icon-position{
  position: fixed;
  bottom: 40px;
  right: 25px;
  z-index: 40;
}
.icon-style{
  background-color: var(--darker);
  border: 2px solid #fff;
  border-radius: 50%;
  height: 50px;
  width: 50px;
  color: #fff;
  cursor: pointer;
  animation: movebtn 3s ease-in-out infinite;
  transition: all .5s ease-in-out;
}
.icon-style:hover{
  animation: none;
  background: #fff;
  color: var(--darker);
  border: 2px solid var(--darker);
}
@keyframes movebtn {
  0%{
    transform: translateY(0px);
  }
  25%{
    transform: translateY(20px);
  }
  50%{
    transform: translateY(0px);
  }
  75%{
    transform: translateY(-20px);
  }
  100%{
    transform: translateY(0px);
  }
}

/*animation*/

.hide{
  opacity: 0;
  transition: all 1s;
  filter: blur(1px);
}

.show{
  opacity: 1;
  filter: blur(0);
}

.menu{
  animation: menuMove 3s ease-in-out ;
  transition: all .5s ease-in-out;
}

@keyframes menuMove {
  0%{
    transform: translateX(100px);
    opacity: 0.2;
  }

  10%{
    transform: translateX(0px);
    opacity: 1;
  }
}

 /*loader*/

 .loader{
  position: fixed;
  z-index: 100;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: var(--main );
  transition: opacity 0.75s, visibility 0.75s;
}

.loader-hidden{
  opacity: 0;
  visibility: hidden;
  background-color: var(--app-col );
}

.loader::after{
  content: "";
  width: 60px;
  height: 60px;
  border: 15px solid #dddddd;
  border-top-color: var(--dark);
  border-radius: 50%;
  animation: loading 0.75s ease infinite;
}

@keyframes loading {
  from{
      transform: rotate(0turn);
  }
  to{
      transform: rotate(1turn);
  }
}